ditto.cluster {
  sbr {
    auto-enable-after = 1h
    auto-enable-after = ${?DITTO_CLUSTER_SBR_AUTO_ENABLE_AFTER}
  }
}

akka.cluster {

  # Akka built-in split brain resolver
  downing-provider-class = org.eclipse.ditto.base.service.cluster.DittoSplitBrainResolverProvider

  # Akka built-in split brain resolver configuration
  split-brain-resolver {
    # Possible to switch to "lease-majority" when run in a kubernetes cluster,
    # so that the surviving minority does not down itself when a majority crashes.
    # Additional configuration required for Kubernetes:
    # https://doc.akka.io/docs/akka/current/split-brain-resolver.html#lease
    active-strategy = keep-majority
    active-strategy = ${?CLUSTER_DOWNING_ACTIVE_STRATEGY}

    # how to find the right value:
    # https://doc.akka.io/docs/akka/current/split-brain-resolver.html
    stable-after = 8s
    stable-after = ${?CLUSTER_DOWNING_STABLE_AFTER}

    # if reachability of previous cluster members kept changing for this duration then
    # all cluster members are downed. The default "on" means 0,75x stable-after max between the first node becoming
    # unreachable and the last for the cluster not to down itself.
    down-all-when-unstable = on
    down-all-when-unstable = ${?CLUSTER_DOWNING_DOWN_ALL_WHEN_UNSTABLE}

    lease-majority {
      # implementation of lease, see below
      lease-implementation = "akka.coordination.lease.kubernetes"
    }
  }
}

akka.coordination.lease.kubernetes {

  lease-class = "akka.coordination.lease.kubernetes.KubernetesLease"

  // Kubernetes mount these in pods
  api-ca-path = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
  api-token-path = "/var/run/secrets/kubernetes.io/serviceaccount/token"
  namespace-path = "/var/run/secrets/kubernetes.io/serviceaccount/namespace"

  // use namespace in namespace-path
  namespace = "<namespace>"

  api-service-host = "localhost"
  api-service-host = ${?KUBERNETES_SERVICE_HOST}

  api-service-port = 8080
  api-service-port = ${?KUBERNETES_SERVICE_PORT}

  # lease refresh frequency by holder
  heartbeat-interval = 10s

  # lease TTL - lease locked out for this long after holder crashes
  heartbeat-timeout = 120s

  # default: 2s = 0.4*lease-operation-timeout
  api-server-request-timeout = ""

  # fail lease operation after this long
  lease-operation-timeout = 5s

  secure-api-server = true
}
